---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kpng
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kpng
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:node-proxier
subjects:
- kind: ServiceAccount
  name: kpng
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  creationTimestamp: null
  labels:
    app: kpng
  name: kpng
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: kpng
  template:
    metadata:
      labels:
        app: kpng
    spec:
      # to enable progressive deployment on existing cluster you can use node labels:
      #nodeSelector:
      #  kpng: kpng
      serviceAccountName: kpng
      hostNetwork: true
      # so that kpng always runs on the controlplane nodes...
      tolerations:
      - operator: "Exists"
        effect: "NoSchedule"
      containers:
      # only spin up bptools image if ebpf is the selected backend.
      - image: cilium/cilium-bpftool:b5ba881d2a7ec68d88ecd72efd60ac551c720701
        imagePullPolicy: IfNotPresent
        name: kpng-ebpf-tools
        securityContext:
          privileged: true
        command: [ "/bin/bash", "-c", "--", "sleep infinity" ]
        volumeMounts:
        - name: modules
          mountPath: /lib/modules
          readOnly: true
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: bpf-log
          mountPath: /tracing
      - image: ghcr.io/redhat-et/kpng:latest
        imagePullPolicy: Always
        env:
        - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
          value: warn
        name: kpng
        volumeMounts:
        - name: empty
          mountPath: /k8s
        - mountPath: /var/lib/kpng
          name: kpng-config
        args:
        - kube
        - --kubeconfig=/var/lib/kpng/admin.conf
        - to-api
        - --listen=unix:///k8s/proxy.sock
      - image: ghcr.io/redhat-et/kpng:latest
        imagePullPolicy: Always
        env:
        - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
          value: warn
        name: kpng-ebpf
        securityContext:
            privileged: true
        volumeMounts:
        - name: empty
          mountPath: /k8s
        - name: modules
          mountPath: /lib/modules
          readOnly: true
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
        - name: cgroup-v2-fs
          mountPath: /sys/fs/cgroup/unified
          readOnly: true
        - name: cgroup-v2-mount
          mountPath: /host-mount/mounts
          mountPropagation: HostToContainer
        args: ['local', '--api=unix:///k8s/proxy.sock', 'to-ebpf', '--v=4']
        #- --dry-run
      volumes:
      - name: empty
        emptyDir: {}
      - name: modules
        hostPath:
          path: /lib/modules
      - name: kpng-config
        configMap:
          name: kpng
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      - name: bpf-log
        hostPath:
          path: /sys/kernel/debug/tracing
      - name: cgroup-v2-fs
        hostPath:
          path: /sys/fs/cgroup/unified
      - name: cgroup-v2-mount
        hostPath:
          path: /proc/mounts