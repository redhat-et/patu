#!/bin/bash
#
# Copyright Â© 2022 Authors of Patu
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This script allows for 3 kinds of options- each available with two commands:
# Command can be apply | delete
# Options can be : cni | kpng | all
# apply cni - deploys patu, delete cni - removes patu
# apply kpng - deploys clusterip svc implementation, delete kpng - removes kpng
# apply all - deploy cni, kpng ; delete all - remove cni, kpng

# Examples with the Patu repo in the current working directory:
# patu/scripts/installer/patu-installer apply cni
# patu/scripts/installer/patu-installer delete cni
# patu/scripts/installer/patu-installer apply all
# patu/scripts/installer/patu-installer delete all

# Example using ENVs for file locations to run the installer from any location:
# KUBECONFIG=${HOME}/.kube/config \
# PATU_CONFIG=$HOME/patu/deploy/patu.yaml \
# KPNG_CONFIG=$HOME/patu/hack/kubernetes/kpngebpf.yaml \
# ./patu-installer apply all

KUBECONFIG=${KUBECONFIG:="/etc/kubernetes/admin.conf"}
PATU_CONFIG=${PATU_CONFIG:="patu/deploy/patu.yaml"}
KPNG_CONFIG=${KPNG_CONFIG:="patu/hack/kubernetes/kpngebpf.yaml"}

arg=$1
opt=$2

(ip addr | awk '/inet/{print $2}' | awk -F/ '{print $1}') > /tmp/internal_ip.txt
local_node=$(kubectl get node -o wide | grep -f /tmp/internal_ip.txt | awk '{print $1}')

file_exists() {
    local f="$1"
    stat $f &>/dev/null
}

# Verify config and yaml files exist
if ! file_exists ${KUBECONFIG}; then
    echo -e "\nkubeconfig not found at ${KUBECONFIG}. Please set it using 'export KUBECONFIG=/path/to/config'\n"
    exit 1
fi
if ! file_exists ${PATU_CONFIG}; then
    echo -e "\npatu.yaml not found at ${PATU_CONFIG}. Please set it using 'export PATU_CONFIG=/path/to/patu.yaml'\n"
    exit 1
fi
if ! file_exists ${KPNG_CONFIG}; then
    echo -e "\npatu.yaml not found at ${KPNG_CONFIG}. Please set it using 'export KPNG_CONFIG=/path/to/kpngebpf.yaml'\n"
    exit 1
fi

# kpng configmap currently looks for a hardcoded file name of admin.conf
# this simply copies KUBECONFIG to admin.conf if it does not exist
KUBCONFIG_CONFIG_FILE="$(basename "${KUBECONFIG}")"
KUBECONFIG_CONFIG_FILEPATH="$(dirname "${KUBECONFIG}")"
if ! [ ${KUBCONFIG_CONFIG_FILE} = "admin.conf" ]; then
    cp ${KUBECONFIG} "${KUBECONFIG_CONFIG_FILEPATH}/admin.conf"
fi
FIXEDUP_KUBECONFIG="${KUBECONFIG_CONFIG_FILEPATH}/admin.conf"

if [[ "$arg" != "apply" && "$arg" != "delete" ]] || [[ "$opt" != "cni" && "$opt" != "kpng" && "$opt" != "all" ]]; then
    echo -e "Usage details:\nRun as ./patu-installer <COMMAND> <OPTION>\nCOMMAND: apply | delete\nOPTION: cni | kpng | all"
elif [ "$arg" = "apply" ]; then
    if [ "$opt" = "all" ]; then
        kubectl taint nodes $local_node node-role.kubernetes.io/master:NoSchedule- node-role.kubernetes.io/control-plane:NoSchedule-
        kubectl apply -f ${PATU_CONFIG}
        kubectl label node $local_node kube-proxy=kpng
        kubectl create configmap kpng --namespace kube-system --from-file ${FIXEDUP_KUBECONFIG}
        kubectl apply -f ${KPNG_CONFIG}
    elif [ "$opt" = "cni" ]; then
        kubectl apply -f ${PATU_CONFIG}
    else
        kubectl taint nodes $local_node node-role.kubernetes.io/master:NoSchedule- node-role.kubernetes.io/control-plane:NoSchedule-
        kubectl label node $local_node kube-proxy=kpng
        kubectl create configmap kpng --namespace kube-system --from-file ${FIXEDUP_KUBECONFIG}
        kubectl apply -f ${KPNG_CONFIG}
    fi
else
    if [ "$opt" = "all" ]; then
        kubectl delete -f ${KPNG_CONFIG}
        kubectl delete cm kpng -n kube-system
        kubectl label node $local_node kube-proxy-
        kubectl delete -f ${PATU_CONFIG}
    elif [ "$opt" = "cni" ]; then
        kubectl delete -f ${PATU_CONFIG}
    else
        kubectl delete -f ${KPNG_CONFIG}
        kubectl delete cm kpng -n kube-system
        kubectl label node $local_node kube-proxy-
    fi
fi
